server:
  port: 8070
  servlet:
    context-path: /

# Eureka Client Configuration (Microservice Registration)
spring:
  application:
    name: projects-service  # Unique name for Eureka
  datasource:
    url: jdbc:postgresql://localhost:5434/projectdb
    username: project_admin
    password: project_password
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: update
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: true
    properties:
      hibernate.format_sql: true
  kafka:
    bootstrap-servers: localhost:9092  # Use localhost:9092 for outside Docker
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      group-id: project-service-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
    properties:
      spring.json.trusted.packages: "*"  # Allow all packages for deserialization
      spring.json.value.default.type: com.tensai.projets.dtos.AlertEvent  # Your event class
  mail:
    host: localhost  # Resolved to the MailDev container's mapped port
    port: 1025       # SMTP port exposed by MailDev
    properties:
      mail.smtp:
        auth: false   # MailDev doesn't require authentication
        starttls.enable: false
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:9090/realms/tensai-realm
          jws-algorithms: RS256
          audience: projects-service
          jwk-set-uri: http://localhost:9090/realms/tensai-realm/protocol/openid-connect/certs

## Keycloak Configuration
keycloak:
  realm: tensai-realm
  auth-server-url: http://localhost:9090
  resource: projects-service
  credentials:
    secret: qZeCIguldWwtckRJPjh5rkTEu5IxLTGt
  use-resource-role-mappings: true

# Cloudinary Configuration
cloudinary:
  cloud-name: dlqksf70c
  api-key: 573436971741363
  api-secret: wgXympMIBTnPdZvY3sz3VxMdVjU

# Eureka Client Settings
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka  # Eureka server URL
    registry-fetch-interval-seconds: 5  # Refresh service list every 5 seconds
    healthcheck:
      enabled: true  # Enable health checks
  instance:
    prefer-ip-address: true  # Register with IP instead of hostname
    lease-renewal-interval-in-seconds: 10  # How often to send heartbeats
    lease-expiration-duration-in-seconds: 30  # Time before marking as down

logging:
  level:
    root: INFO
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    com.example.projectmanagement: DEBUG
    com.netflix.eureka: DEBUG  # Enable Eureka client logs for debugging
    org.springframework.security: DEBUG


springdoc:
  swagger-ui:
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: alpha
  api-docs:
    path: /v3/api-docs
  paths-to-match: /api/**  # Match your API endpoints
  packages-to-scan: com.tensai.projets
  paths-to-exclude: /error
  default-produces-media-type: application/json
  default-consumes-media-type: application/json


predictor:
  service:
    url: http://localhost:8001